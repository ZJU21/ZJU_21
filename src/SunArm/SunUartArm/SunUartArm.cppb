/* SunArm library York Hack Space May 2014
 * A simple control library for Phenoptix' SunArm
 * Usage:
 *   SunArm arm;
 *   arm.begin(1, 10, 9, 6);
 *   arm.openGripper();
 *   arm.gotoPoint(-80, 100, 140);
 *   arm.closeGripper();
 *   arm.gotoPoint(70, 200, 10);
 *   arm.openGripper();
 */
#include "SunUartArm.h"



bool setup_servo(ServoInfo& svo, const int n_min, const int n_max,
                 const float a_min, const float a_max) {
  float n_range = n_max - n_min;  // pwm范围
  float a_range = a_max - a_min;  //角度范围

  // Must have a non-zero angle range
  if (a_range == 0) return false;

  // Calculate gain and zero
  svo.gain = n_range / a_range;         //计算增益
  svo.zero = n_min - svo.gain * a_min;  //零角度

  // Set limits
  svo.n_min = n_min;  //设置范围
  svo.n_max = n_max;

  return true;
}

int angle2pwm(const ServoInfo& svo, const float angle) {
  float pwm = 0.5f + svo.zero + svo.gain * angle;  //为什么要加0.5f
  return int(pwm);
}


//在构造SunArm时，同时初始化构造舵机控制对象
   SunUartArm::SunUartArm(HardwareSerial& uartPort,FSUS_SERVO_ID_T base=0, FSUS_SERVO_ID_T shoulder=1, FSUS_SERVO_ID_T elbow=2,
     FSUS_SERVO_ID_T wrist=3, FSUS_SERVO_ID_T gripper=4){


       

     };




SunArm::SunArm(HardwareSerial& uartPort, int sweepMinBase, int sweepMaxBase,
               float angleMinBase, float angleMaxBase, int sweepMinShoulder,
               int sweepMaxShoulder, float angleMinShoulder,
               float angleMaxShoulder, int sweepMinElbow, int sweepMaxElbow,
               float angleMinElbow, float angleMaxElbow, int sweepMinGripper,
               int sweepMaxGripper, float angleMinGripper,
               float angleMaxGripper)
    : _sunArmServo(uartPort) {
  // calroutine();
  setup_servo(_svoBase, sweepMinBase, sweepMaxBase, angleMinBase, angleMaxBase);
  setup_servo(_svoShoulder, sweepMinShoulder, sweepMaxShoulder,
              angleMinShoulder, angleMaxShoulder);
  setup_servo(_svoElbow, sweepMinElbow, sweepMaxElbow, angleMinElbow,
              angleMaxElbow);
  setup_servo(_svoGripper, sweepMinGripper, sweepMaxGripper, angleMinGripper,
              angleMaxGripper);
}

void SunArm::begin(byte pinBase, byte pinShoulder, byte pinElbow,
                   byte pinGripper) {
  _pinBase = pinBase;
  _pinShoulder = pinShoulder;
  _pinElbow = pinElbow;
  _pinGripper = pinGripper;

  // goDirectlyTo(0, 100, 50);
  goDirectlyToCylinder(0, 100, 50);  //初始角度
  openGripper();
}

void SunArm::end() { _sunArmServo.stopServo(); }

// Set servos to reach a certain point directly without caring how we get there
void SunArm::goDirectlyTo(float x, float y, float z) {
  float radBase, radShoulder, radElbow;
  if (solve(x, y, z, radBase, radShoulder, radElbow)) {
    _sunArmServo.moveServo(_pinBase, angle2pwm(_svoBase, radBase), 10);
    _sunArmServo.moveServo(_pinShoulder, angle2pwm(_svoShoulder, radShoulder),
                           10);
    _sunArmServo.moveServo(_pinElbow, angle2pwm(_svoElbow, radElbow), 10);
    _x = x;
    _y = y;
    _z = z;
  }
}

// Travel smoothly from current point to another point
void SunArm::gotoPoint(float x, float y, float z) {
  // Starting points - current pos
  float x0 = _x;
  float y0 = _y;
  float z0 = _z;
  float dist =
      sqrt((x0 - x) * (x0 - x) + (y0 - y) * (y0 - y) + (z0 - z) * (z0 - z));
  int step = 10;
  for (int i = 0; i < dist; i += step) {
    goDirectlyTo(x0 + (x - x0) * i / dist, y0 + (y - y0) * i / dist,
                 z0 + (z - z0) * i / dist);
    delay(50);
  }
  goDirectlyTo(x, y, z);
  delay(50);
}

// Get x and y from theta and r
void SunArm::polarToCartesian(float theta, float r, float& x, float& y) {
  _r = r;
  _t = theta;
  x = r * sin(theta);
  y = r * cos(theta);
}

// Same as above but for cylindrical polar coodrinates
void SunArm::gotoPointCylinder(float theta, float r, float z) {
  float x, y;
  polarToCartesian(theta, r, x, y);
  gotoPoint(x, y, z);
}

void SunArm::goDirectlyToCylinder(float theta, float r, float z) {
  float x, y;
  polarToCartesian(theta, r, x, y);
  goDirectlyTo(x, y, z);
}

// Check to see if possible
bool SunArm::isReachable(float x, float y, float z) {
  float radBase, radShoulder, radElbow;
  return (solve(x, y, z, radBase, radShoulder, radElbow));
}

// Grab something
void SunArm::openGripper() {
  _sunArmServo.moveServo(_pinGripper, angle2pwm(_svoGripper, pi / 2), 10);
  delay(300);
}

// Let go of something
void SunArm::closeGripper() {
  _sunArmServo.moveServo(_pinGripper, angle2pwm(_svoGripper, 0), 10);

  delay(300);
}

// Current x, y and z
float SunArm::getX() { return _x; }
float SunArm::getY() { return _y; }
float SunArm::getZ() { return _z; }

float SunArm::getR() { return _r; }
float SunArm::getTheta() { return _t; }
float SunUartArm::IKMapServo(float x,byte k,int b)
{float y;
y=k*x+ang2rad(b);
return y}
